generator client {
  provider   = "prisma-client-js"
  engineType = "library"
}

datasource db {
  provider = "mongodb"
  url      = env("DB_URL")
}

// This model is useless and only here to test the connection on application start
// Yeap, it's janky but I don't know a better way to do it
model Heartbeart {
  id String @id @default(auto()) @map("_id") @db.ObjectId
}

model User {
  id                  String                @id @default(auto()) @map("_id") @db.ObjectId
  email               String                @unique
  name                String
  authId              String                @unique
  createdAt           DateTime              @default(now())
  updatedAt           DateTime              @updatedAt
  queries             Query[]
  GoogleDMA           GoogleDMA[]
  UserPersonalisation UserPersonalisation[]
  Topic               Topic[]
  subscription_status Boolean @default(false)
  credits             Int     @default(0)
}

model Query {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  userId     String   @db.ObjectId
  query      String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  script     String?
  podcastUrl String?
  category   String?
  imageUrl   String?
}

model Topic {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  user         User     @relation(fields: [userId], references: [id])
  userId       String   @db.ObjectId
  query        String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  podcastIdeas String?
}

enum GoogleDMAStatus {
  NotStarted
  Started
  Complete
  Failed
}

model GoogleDMA {
  id               String          @id @default(auto()) @map("_id") @db.ObjectId
  token            String
  createdAt        DateTime        @default(now())
  updatedAt        DateTime        @updatedAt
  searchJobStatus  GoogleDMAStatus @default(NotStarted)
  youtubeJobStatus GoogleDMAStatus @default(NotStarted)
  searchJobId      String?
  youtubeJobId     String?
  user             User            @relation(fields: [userId], references: [id])
  userId           String          @unique @db.ObjectId
  lockedBy         String?
}

enum Providers {
  Google
}

model UserPersonalisation {
  id              String    @id @default(auto()) @map("_id") @db.ObjectId
  user            User      @relation(fields: [userId], references: [id])
  userId          String    @unique @db.ObjectId
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  provider        Providers
  searchTopics    String[]
  ecommerceTopics String[]
}

model Recommendation {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  recommendation String
}

